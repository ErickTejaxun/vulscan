println("--------------Pruebas desarrollo");
println("--------------Sumas------------------");
println(2 + 3.3);
println(2.3 + 8);
println(1.2 + 5.4);
println(2+3);


println("--------------Restas------------------");
println(2 - 3.3 );
println(2.3 - 8 );
println(1.2 - 5.4 );
println(2-3 );


#JOLC Compiladores 2 USAC 2021
println("--------------Literales------------------");
println(10);
println(10.3);
println(10.3333333333333333);
println(nothing);
println(true);
println(false);
println(nothing);
println('3333433');
println(-3);
println(23+6.66+66);


#Multiplicacion
#JOLC Compiladores 2 USAC 2021
println("--------------Multiplicacion------------------");
println(-10+333+10);
println("Hola" * "Mundo");
println(2*3.3);
println(2.3*8);
println(1.2*5.4);
println(2*3);

#Division
println("--------------Division------------------");
println(2/3.3);
println(2.3/8);
println(1.2/5.4);
println(6/4);

println("--------------Potencia------------------");
#Potencia
println(2 ^ 3.5);
println(2.3 ^ 8);
println(1.2 ^ 5.4);
println(6 ^ 2);
println("Hola perros"^5);


#Modulo
println("--------------Modulo------------------");
println(2%3.5);
println(2.3%8);
println(1.0%5.0);
println(6%3);


println("--Uperacase and lowercase");
println(uppercase("hola")^3);
println(lowercase("HOLA")^3);
println(uppercase("hola")* lowercase("HOLA"));
println(lowercase("HOLA")* uppercase("hola"));

## Logaritmos
println(log10(100));
println(log(2,4));
println(sin(45));
println(cos(45));
println(tan(45));
println(sqrt(25));
println(200>30);
println(330<330);
println(330<=330);
println(330>=330);

println(false || false);
println(false || true);
println(true || false);
println(true || true);

println(false && false);
println(false && true);
println(true && false);
println(true && true);

println(! true);
println(! false);

#JOLC Compiladores 2 USAC 2021
print(30#= comantario de muchas lineas
  
  =# *3);

println("Hola");

#JOLC Compiladores 2 USAC 2021
println("Hola mundo 3444 $(232)");

#JOLC Compiladores 2 USAC 2021
println("Total : $(4*2). Fin Factura");
println("Total : $(4*2+232*3). Fin Factura $(3*3)", " Hola mundo"^3);
#JOLC Compiladores 2 USAC 2021
a = 4*3;
b = 30-3 :: Int64;
println("a*b = $(a*b)");

a = 4*3;
b = 30-3 :: Int64;
c = 3 :: Int64;
println("a*b = $(a*b) c= $(c)");

x = (3*5)::Int64; # Correcto
str = "Saludo"::Int64; # ERROR: expected Int64, got String
var1 = true::String; # ERROR: expected String, got Bool
var = 1234;

#JOLC Compiladores 2 USAC 2021
a = 10;
println("Hola perros $(4/4-23*-1)---$(3*a)"^3, "x"^a , a-3*a);

#JOLC Compiladores 2 USAC 2021
println("Hola mundo 3444 $(232)");

#JOLC Compiladores 2 USAC 2021
println("Total : $(4*2). Fin Factura");
println("Total : $(4*2+232*3). Fin Factura $(3*3)", " Hola mundo"^3);
#JOLC Compiladores 2 USAC 2021
a = 4*3;
b = 30-3 :: Int64;
println("a*b = $(a*b)");

a = 4*3;
b = 30-3 :: Int64;
c = 3.33 :: Int64;
println("a*b = $(a*b) c= $(c)");


x = (3*5)::Int64; # Correcto
str = "Saludo"::Int64; # ERROR: expected Int64, got String
var1 = true::String; # ERROR: expected String, got Bool
var = 1234;


x = 8;
if x == 8
var1 = (x + 8) :: Int64;
println(sqrt(var1));
elseif x < 8
var1 = (x / 3) :: Float64;
println(sin(var1));
else
println("Error");
end;
  
cadena = "123456";
for i in cadena
  println(i, "Iteracion");
end;

for i in 1:10
  for x in 1:i
  	print("i");
    end;
  println("");
end;

animales = ["perro", "gato", "tortuga", "Saltamonetes", "Capibara"];

for animal in animales
println("$(animal) es mi favorito");
#= Imprime
perro es mi favorito
gato es mi favorito
tortuga es mi favorito
=#
  end;


println("animales = $(animales)");

function obtenerValor()
	println("Obtener Valor");
	return 3;
end;

valor = obtenerValor();




println("--------------Archivo Expresiones Básicas--------------");

println("Probando expresiones Arítmeticas");

println(-25^(69-33*2)+22-32*2-33^(-48+48));   # -15668
println(-93.555+92.12-81.33+19+26-68+-7/(79+11)/86);    # -105.76590439276485
println(8+67+74-1.0^((-86+22)*2)-5^6);  # -15477.0
println((51 % 49) * (9.9+90.1));    # 200.0
println(0+9*3*(85%(46+95)));    # 2295

println("Probando expresiones Booleanas y Lógicas");

println(56 < 48 && 68 >=12 && 62 != 96);    # false
println((21.0==20.5||95>=94)&&((19<39&&83<=96)||35<97));    # true
println((68==33||(2<95&&17==37))&&63<=9||12<=42||25==1);    # true

println("Probando expresiones Arítmeticas, Booleanas y Lógicas");
if ((true == true && false != false) || true == false)
    println("No entra acá");
else
    println("Entra acá");
end;

if (1 == (1 + 1 - (1 * 2 / 2)) && 20.5 == 20.5)
    println("Entra acá");
else
    println("No entra acá");
end;

if "Hola" == "Mundo"
    println("No entra acá");
else
    println("Entra acá");
end;





function obtenerValor()
	println("Obtener Valor cx");
	return 3;
end;

valor = obtenerValor();
println(obtenerValor()/5);



println("------------RECURSIVIDAD------------");

function factorial(n::Int64)  	
  	if n<= 1 
    	return 1;
  	else
    	return n*factorial(n-1);
    end;
end;
  
for i in 1:10
	println(factorial(i));
end;

function ack(m, n)
 return m == 0 ? n + 1 : ack(m - 1, n == 0  ? 1 : ack(m, n - 1));
end;


function ackerman(m::Int64, n::Int64)
  if (m==0)
   	return n+1;
  elseif (m > 0 && n == 0)
    return ackerman(m-1,1);
  else
    return ackerman(m-1, ackerman(m,n-1));
    end;
end;

for i in 1:3
  for x in 1:3   
	println(ackerman(i,x));
    end;
  end;


for i in 1:3
  for x in 1:3   
	println(ack(i,x));
    end;
  end;




println("--------------Archvio expresiones avanzadas-------------------");

println("Funciones nativas aritmeticas");
# log(base, numero)
println(log(2, 4));     # 2.0
println(log(9, 135));   # 2.2324867603589635
# log10()
println(log10(2000));   # 3.3010299956639813
println(log10(512));    # 2.709269960975831
# trigonometricas
println(sin(67/360*2*3.14));    # 0.9202730580752193
println(cos(67/360*2*3.14));    # 0.39127675446016985
println(tan(67/360*2*3.14));    # 2.351974778938468
# sqrt
println(sqrt(2^4));     # 4.0
println(sqrt(1258));    # 35.4682957019364

println("Operaciones con cadenas");
println("para" * "caidismo");   # paracaidismo
println("Holaaa"^5);    # HolaaaHolaaaHolaaaHolaaaHolaaa
#println("Hola Mundo!"[begin:5] * "Auxiliar"[1] * "Auxiliar"[2:end]);    # Hola Auxiliar
println(length("Esto no sé cuanto mide"));  # 22
println(uppercase("mayuscula"));    # MAYUSCULA
println(lowercase("MINUSCULA"));    # minuscula

println("Operador ternario");
animal = "Tortuga"
println(animal == "Perro" ? 20 : "No"); # No


#function ack(m, n) {
# return m === 0 ? n + 1 : ack(m - 1, n === 0  ? 1 : ack(m, n - 1));
#}


a = [1,2,[10,11,12]];
print(a);
 
a[1] = [99,98,97,96];

a = [1,2,[10,11,12]];
#println(a);
a[0] = 200;
println(a[2]*2);

# Struct Inmutable
struct Personaje
nombre;
edad::Int64;
descripcion::String;
end;
# Struct Mutable
mutable struct Carro
placa;
color::String;
tipo;
end;

p1 = Personaje("Erick", 18, "Mensaje");